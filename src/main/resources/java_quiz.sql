INSERT INTO public.java_quiz (id, answer_correct, option2, option3, option1, question)
VALUES
       (1, 'long', 'int', 'byte', 'short', 'Какая переменная примитивного типа может содержать наибольшее число?'),
       (2, 'int', 'Integer', 'long', 'double', 'Какая переменная примитивного типа используется по умолчанию в качестве принимаемого целочисленного числа?'),
       (3, 'ООП', 'SOLID', 'Журнаирование', 'Тестирование', 'Определение какого понятия понимается как "Методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования"?'),
       (4, 'Инкапсуляция', 'Абстракция', 'Полиморфизм', 'Наследование', 'Один из принципов ООП, обозначающий "Сокрытие информации"?'),
       (5, 'Наследование', 'Инкапсуляция', 'Полиморфизм', 'Абстракция', 'Один из принципов ООП, обозначающий "Создание новой сущности (объекта) на базе уже существующей"?'),
       (6, 'Полиморфизм', 'Наследование', 'Абстракция', 'Инкапсуляция', 'Один из принципов ООП, обозначающий "Возможность иметь разные формы для одной и той же сущности (объекта)"?'),
       (7, 'Посылка сообщений', 'Переиспользование', 'Инкапсуляция', 'Полиморфизм', 'Один из принципов ООП, обозначающий "Форма связи, взаимодействия между сущностями (объектами)"?'),
       (8, 'Абстракция', 'Наследование', 'Инкапсуляция', 'Полиморфизм', 'Один из принципов ООП,под которым понимается "Набор общих характеристик объекта, исключая из рассмотрения частные и незначимые"?'),
       (9, 'JDK', 'JRE', 'SDK', 'JVM','Комплект разработчика приложений на языке Java, включающий в себя компилятор Java (javac), стандартные библиотеки классов Java, примеры, документацию, различные утилиты и исполнительную систему Java (JRE)'),
       (10, 'JRE', 'SDK', 'JVM','JDK', 'Минимальная реализация виртуальной машины, необходимая для исполнения Java-приложений, без компилятора и других средств разработки'),
       (11, 'JVM','JDK','JRE', 'SDK', 'Основная часть исполняющей системы Java, так называемой Java Runtime Environment (JRE), исполняет байт-код Java, предварительно созданный из исходного текста Java-программы компилятором Java (javac).'),
       (12, 'SDK', 'JVM','JDK', 'JRE','Набор средств разработки, позволяющий специалистам по программному обеспечению создавать приложения для определённого пакета программ, программного обеспечения базовых средств разработки, аппаратной платформы, компьютерной системы, игровых консолей, операционных систем и прочих платформ.'),
       (13, 'private', 'default', 'protected', 'public', 'Модификатор доступа, при котором члены класса доступны только внутри класса'),
       (14, 'default', 'private', 'protected', 'public', 'Модификатор доступа, при котором видимость класса/членов класса только внутри пакета, является модификатором доступа по умолчанию'),
       (15, 'protected', 'default', 'private', 'public', 'Модификатор доступа, при котором члены класса доступны внутри пакета и в наследниках'),
       (16, 'public', 'protected', 'default', 'private', 'Модификатор доступа, при котором класс/члены класса доступны всем'),
       (17, 'final', 'protected', 'default', 'private', 'Модификатор доступа, при котором класс не может иметь наследников'),
       (18, 'final', 'protected', 'default', 'private', 'Модификатор доступа, при котором метод не может быть переопределен в классах наследниках'),
       (19, 'final', 'protected', 'default', 'private', 'Модификатор доступа, при котором поле не может изменить свое значение после инициализации'),
       (20, 'final', 'protected', 'default', 'private', 'Модификатор доступа, при котором параметры методов не могут изменять своё значение внутри метода'),
       (21, 'final', 'protected', 'default', 'private', 'Модификатор доступа, при котором локальные переменные не могут быть изменены после присвоения им значения'),
       (22, 'main()', 'String[] args', 'create()', 'open()', 'Метод, являющийся точкой входа в программу'),
       (23, '&', '|', '^', '|=', 'Логический оператор, обозначающий логическое AND (И)'),
       (24, '&&', '|', '^', '|=', 'Логический оператор, обозначающий сокращернное AND (И)'),
       (25, '|', '==', '^', '|=', 'Логический оператор, обозначающий логическое OR (ИЛИ)'),
       (26, '||', '==', '^', '|=', 'Логический оператор, обозначающий сокращернное OR (ИЛИ)'),
       (27, '^', '==', '&', '|=', 'Логический оператор, обозначающий логическое XOR (исключающее OR (ИЛИ))'),
       (28, '!', '==', '&', '|=', 'Логический оператор, обозначающий логическое унарное NOT (НЕ)'),
       (29, '&=', '||', '&', '|=', 'Логический оператор, обозначающий AND с присваиванием'),
       (30, '|=','&=', '||', '?:', 'Логический оператор, обозначающий OR с присваиванием'),
       (31, '^=','&=', '||', '?:', 'Логический оператор, обозначающий XOR с присваиванием'),
       (32, '==','&=', '|=', '?:', 'Логический оператор, обозначающий "равно"'),
       (33, '?:','&=', '|=', '^', 'Тернарный (троичный) условный оператор'),
       (34, '?:','&=', '|=', '^', 'Оператор, которым можно заменить некоторые конструкции операторов if-then-else'),
       (35, 'нет','если есть модификатор "abstract"', 'да', 'если есть модификатор "protected"', 'Могут ли абстрактные классы унаследовать некоторые свойства других классов?'),
       (36, 'нет','если есть модификатор "private"', 'да', 'если есть модификатор "public"', 'Можно ли создавать экземпляры абстрактных класссов?'),
       (37, 'обязателен к реализации у классах наследниках','не обязателен к реализации у классах наследниках', 'необходимо реализовать в абстрактном классе', 'является ошибкой', 'Если у абстрактного класса имеется метод с модификатором abstract, то он...'),
       (38, 'сколько необходимо','только одного', 'только двух', 'ниодного', 'Сколько интерфейсов можно реализовать в одном классе?'),
       (39, 'только одного','сколько необходимо', 'только двух', 'ниодного', 'От скольких "родительских" классов можно унаследовать свойства?'),
       (40, 'Интерфейс','абстрактный класс', 'класс с мдификатором "final"', 'класс с мдификатором "static"', 'Полностью абстрактный класс, основное предназначение которого определять каким образом можем использовать класс, который его реализует.'),
       (41, 'маркерные интерфейсы','пустые интерфейсы', 'абстрактные классы', 'так недопустимо делать', 'Интерфейсы, в которых не определены методы - это...'),
       (42, 'интерфейс','класс', 'абстрактный класс', 'метод', 'Что имеет более высокий уровень абстракции?'),
       (43, 'является классом-наследником','он находится внури класса', 'является вложенным классом', 'используя Сеттеры и Геттеры', 'В каком случае объект НЕ может получить доступ к члену класса, объявленному как private?'),
       (44, 'статический блок инициализации','нестатический блок инициализации', 'статический конструктор', 'нестатический конструктор', 'Что при запуске программы вызовется в первую очередь?'),
       (45, 'классам верхнего уровня','полям', 'методам', 'вложенным классам', 'К каким конструкциям не применим модификатор static?'),
       (46, 'статический блок инициализации','нестатический блок инициализации', 'статический конструктор', 'нестатический конструктор', 'Конструкция, которая должна выполняться один раз при инициализации класса загрузчиком классов, в момент, предшествующий созданию объектов этого класса при помощи конструктора?'),
       (47, 'да','нет', 'только если методы имеют разное название', 'если имеют одинаковое количество и типы параметров', 'Может ли статический метод быть перегружен?'),
       (48, 'нет','да', 'только если методы имеют разное название', 'если имеют одинаковое количество и типы параметров', 'Может ли статический метод быть переопределён?'),
       (50, 'через ключевое слово "super"','никак', 'через ключевое слово "protected"', 'обратиться через название класса родителя', 'Как получить доступ к переопределенным методам родительского класса?'),
       (51, 'нет','да', 'если есть модификатор "final"', 'если есть модификатор "private"', 'Можно ли объявить метод абстрактным и статическим одновременно?'),
       (52, 'Private class (приватный класс)','Interfaces (интерфейс)', 'Nested class (вложенный класс)', 'Enum (Перечисление)', 'Какого типа класса не существует?'),
       (53, 'к вложенным классам','к классам верхнего уровня', 'ни к каким', 'к любым', 'К каким классам применим модификатор "static"?'),
       (54, 'напрямую','через конструктор', 'через обращение к внешнему классу', 'через Геттеры и Сеттеры', 'Каким образом из нестатического вложенного класса получить доступ к полю внешнего класса?'),
       (55, 'к статическим (с модификатором static)','никаким', 'всем', 'к приватным (с модификатором private)', 'К каким полям внешнего класса имеет прямой доступ статический вложенный класс?'),
       (56, 'boolean','String', 'Object', 'ничего не возвращает', 'Какой тип возвращаемого значения имеет оператор "assert"?'),
       (57, 'Heap','Stack', 'HDD', 'вся RAM память', 'Область памяти, который спользуется Java Runtime для выделения памяти под объекты и классы (любой объект, созданный в данном типе памяти, имеет глобальный доступ и на него могут ссылаться из любой части приложения)?'),
       (58, 'Stack','Heap','HDD','вся RAM память', 'Область хранения данных находящейя в общей оперативной памяти (RAM) (всякий раз, когда вызывается метод, в памяти стека создается новый блок, который содержит примитивы и ссылки на другие объекты в методе)?'),
       (59, 'по значению','по ссылке', 'через конструктор', 'через Геттеры и Сеттеры', 'Каким образом передаются переменные в методы?'),
       (60, 'находить неиспользуемые объекты (мусор) и совобождать память от них','находить неиспользуемые объекты (мусор) и хранить их в отдельной оюласти памяти', 'собирать информацию о неисспользуемых объектах', 'такого не существует', 'Для чего нужен сборщик мусора?'),
       (61, 'механизм сборщика мусора','компрессия', 'архивация элементов памяти', 'расширение файла подкачки', 'Процесс освобождения места в куче (Heap), для возможности добавления новых объектов?'),
       (62, 'JavaBean должен реализовывать интерфейс Serializable, или Externalizable','ни в чем', 'JavaBean является методов, а POJO - классом', 'в POJO отсутствует реализация методов equals и hashCode', 'В чем основное различие между POJO и JavaBean?'),
       (63, 'конструктор','блок инициализации', 'метод с модификатором abstract', 'main()', 'Специальный метод, у которого отсутствует возвращаемый тип и который имеет то же имя, что и класс, в котором он используется. Вызывается при создании нового объекта класса и определяет действия необходимые для его инициализации.?'),
       (64, 'по значению','по ссылке', 'через конструктор', 'через Геттеры и Сеттеры', 'Каким образом передаются переменные в методы?'),
       (65, 'byte', 'int', 'long', 'short', 'Какая переменная примитивного типа может содержать наименьшее целочисленное значение?'),
       (66, 'float', 'double', 'long', 'short', 'Какая переменная примитивного типа может содержать наименьшее число с плавающей точкой?'),
       (67, 'char', 'float', 'long', 'boolean', 'Переменная примитивного типа, содержащая только один символ?'),
       (68, 'присвоение', 'равенство', 'логическое "или', 'логическое "не равно"', 'Что обозначает знак "=" в синтаксисе java?'),
       (69, 'да', 'нет', 'можно только переменной  ссылочного типа', 'можно только переменной  примитивного типа', 'Можно ли присваивать значение переменной (инициализировать) сразу при ее объявлении?'),
       (70, 'int age = 22;', 'int age = 22', 'int age = "22";', 'Int age = 22;', 'В каком примере правильно проинициализирована переменная при ее объявлении?'),
       (71, 'CamelCase', 'LowCase', 'RabbitStyle', 'UpperCase', 'Стиль написания названий, состоящих из нескольких слов в синтаксисе java?'),
       (72, 'остаток от деления', 'вычисление процента', 'такой знак не используется', 'деление на ноль', 'Что обозначает знак "%" в синтаксисе java?'),
       (73, '1', '2', '2.5', '0.5', 'Каким будет ответ выражения двух чисел типа "int": (5 % 2)?'),
       (74, '2', '1', '2.5', '0.5', 'Каким будет ответ выражения двух чисел типа "int": (5 / 2)?'),
       (75, '2.0', '1.0', '2', '0', 'Каким будет ответ выражения двух чисел типа "double": (5.0 / 2.5)?'),
       (76, 'System.out.println("Hello World");', 'System.out.println(Hello World);', 'println("Hello World");', 'System.out.println("Hello + World")', 'Какой вариант кода выведет в консоль надпись Hello World?'),
       (77, 'void', 'boolean', 'String', 'List<>', 'Какой тип возвращаемого значения в методе ничего не возвращает?'),
       (78, 'первая заглавноя буква (Class)', 'все строчные бувы (class)', 'все заглавные буквы (CLASS)','первая строчная буква, остальные заглавные (cLASS)', 'Какого правила необходимо придерживаться в названии класса?'),
       (79, 'Class class = new Class();', 'Class class = Class();', 'Class = new Class();','Class class = new Class()', 'В каком случае правильно написание при создании нового объекта класса?'),
       (80, '==', '!=', '=!','===', 'Оператор равенства, необходимый для сравнения значений между собой?'),
       (81, '!=','==', '=!','===', 'Оператор равенства, обозначающий, что два значения не равны между собой?'),
       (82, '<','>', '>=','<=', 'Оператор равенства, обозначающий, что первое значения меньше второго?'),
       (83, '<=','<','>', '>=', 'Оператор равенства, обозначающий, что первое значения меньше второго включительно?'),
       (84, '>=','<=','<','>',  'Оператор равенства, обозначающий, что первое значения больше второго включительно?'),
       (85, '>', '>=','<=','<', 'Оператор равенства, обозначающий, что первое значения больше второго?'),
       (86, 'возвращает значение (объект) у метода возвращаемого типа', 'возвращает значение (объект) у метода с невозвращаемым типом','ничего не возвращает','не является оператором в java', 'Что обозначает оператор "return?'),
       (87, '>', '>=','<=','<', 'Оператор равенства, обозначающий, что первое значения больше второго?'),
       (88, '++', '--','+','-', 'Унарный оператор, увеличивающий число на 1?'),
       (89, '--', '++','+','-', 'Унарный оператор, уменьшающий число на 1?'),
       (90, 'getter', 'setter','recipient','giver', 'Специальный метод, позволяющий получить данные, доступ к которым напрямую ограничен'),
       (91, 'setter','getter', 'recipient','giver', 'Специальный метод для изменения значения поля объекта, доступ к которому напрямую'),
       (92, 'можно, если они одного типа','нельзя', 'можно, если они имеют разные типы','можно, если одинаковое название переменных', 'Можно ли двум и более объектам присваивать одну и ту же ссылку на объект?'),
       (93, 'boolean condition = true;', 'Boolean condition = true;', 'boolean condition = true', 'boolean condition = "true";', 'В каком примере правильно проинициализирована переменная при ее объявлении?'),
       (94, 'float number = 2.9f;', 'float number = 2.9;', 'Float number = 2.9;', 'float number = 2.9f', 'В каком примере правильно проинициализирована переменная при ее объявлении?'),
       (95, 'String text = "Hello world!";', 'string text = "Hello world!";', 'String text = Hello world!;', 'String text = "Hello world!"', 'В каком примере правильно проинициализирована переменная при ее объявлении?'),
       (96, 'long count = 123L;', 'Long count = 123L;', 'long count = 123;', 'long count = 123', 'В каком примере правильно проинициализирована переменная при ее объявлении?'),
       (97, 'while', 'do..while', 'for', 'for each..', 'Оператор цикла с предусловием (цикл будет выполняться, пока условие будет истинно)?'),
       (98, 'do..while', 'while', 'for', 'for each..', 'Оператор цикла с постусловием (перед проверкой условия код выполниться как минимум один раз)?'),
       (99, 'for','while', 'do..while', 'for each..', 'Оператор цикла со счетчиком?'),
       (100, 'for each..','for','while', 'do..while', 'Оператор цикла для перебора коллекции?'),
       (101, '0','null','1', 'индекс совпадает со значением', 'С какого индекса начинаются элементы массива?'),
       (102, 'ArrayMap','HashMap','TreeHashMap', 'LinkedHashMap', 'Что не относится к иерархии коллекции Map?'),
       (103, 'ArraySet','HashSet','TreeHashSet', 'LinkedHashSet', 'Что не относится к иерархии коллекции Set?'),
       (104, 'неизменен','можно как расширить, так и сузить', 'можно только расширить', 'можно только сузить', 'Размер массива после его создания...'),
       (105, 'Hash','Set', 'Map', 'List', 'Какого типа коллекции не существует?'),
       (106, 'автоматически (при добавлении элементов создается новый массив и копируется содержимое старого)','размер коллекции неизменен', 'размер можно только уменьшить', 'вручную задав новый размер', 'Как можно расширить размер коллекции?'),
       (107, 'новыйРазмер = (старыйРазмер * 3)/2 + 1','новыйРазмер = старыйРазмер * 2', 'новыйРазмер = старыйРазмер + 10', 'новыйРазмер = (старыйРазмер * 3)/2 + 10', 'По какому принципу происходит прирост размера коллекции?'),
       (108, 'элементы хранят ссылку на следующий и предыдущий элементы','реализован в виде обычного массива', 'блоками по 5 элементов', 'элементы хранят ссылку на следующий элемент', 'Каков принцип хранения данных в LinkedList?'),
       (109, 'sort()','get()', 'reverse()', 'shuffle()', 'При помощи какого метода класса Collections можно отсортировать все элементы в порядке возрастания, в соответствии с естественным порядком его элементов?'),
       (110, 'get()', 'sort()','reverse()', 'shuffle()', 'При помощи какого метода класса Collections можно получить i-й элемент из списка коллекции?'),
       (111, 'reverse()','get()', 'sort()','shuffle()', 'При помощи какого метода класса Collections можно "зеркально" отсортировать элементы коллекции?'),
       (112, 'swap()','shuffle()','reverse()','get()', 'При помощи какого метода класса Collections можно поменяеть местами элементы в указанных позициях в коллекции (массиве)?'),
       (113, 'fill()','swap()','shuffle()','reverse()','При помощи какого метода класса Collections можно заменить все элементы списка указанным элементом?'),
       (114, 'copy()','fill()','swap()','shuffle()','При помощи какого метода класса Collections можно скопировать все элементы списка в другой?'),
       (115, 'min()','max()','swap()','shuffle()','Какой метод класса Collections возвращает минимальный элемент коллекции в соответствии с естественным порядком ее элементов?'),
       (116, 'max()','min()','swap()','shuffle()','Какой метод класса Collections возвращает максимальный элемент коллекции в соответствии с естественным порядком ее элементов?'),
       (117, 'rotate()', 'reverse()','sort()','shuffle()', 'При помощи какого метода класса Collections можно перевернуть элементы коллекции в заданном диапазоне?'),
       (118, 'replaceAll()', 'get()','sort()','shuffle()', 'При помощи какого метода класса Collections можно заменить элемент (несколько одинаковых элементов) другим?'),
       (119, 'get()', 'sort()','reverse()', 'shuffle()', 'При помощи какого метода класса Array можно получить элемент массива по указанному индексу?'),
       (120, 'set()','get()', 'sort()','reverse()', 'При помощи какого метода класса Array можно задать новый элемент массива по указанному индексу?'),
       (121, 'put()','set()','add()', 'new()', 'При помощи какого метода можно добавить новый элемент коллекции Map?'),
       (122, 'add()','put()','set()', 'new()', 'При помощи какого метода можно добавить новый элемент коллекции Set?'),
       (123, 'add()','put()','set()', 'new()', 'При помощи какого метода можно добавить новый элемент коллекции List?'),
       (124, '"ключ" - "значение"','одним списком','парами по два элемента', 'одним элементом без разделения', 'В каком формате хранятся данные в коллекции Map?'),
       (125, '"@Before"','"@Test"','"@After"', '"@Override"', 'Какая аннотация в JUnit обозначает, что метод будет выполняться перед каждым тестом?'),
       (126, '"@After"','"@Before"','"@Test"', '"@Override"', 'Какая аннотация в JUnit обозначает, что метод будет выполняться после каждого теста?'),
       (127, '"@Test"','"@After"','"@Before"','"@Override"', 'Какая аннотация в JUnit обозначает, что метод непосредственно выполняет тест?'),
       (128, '"@Override"','"@Test"','"@After"','@Before"', 'Какая аннотация обозначает, что метод реализовывает метод родительского класса?'),
       (129, 'implements','extends','import','"@Override"', 'Ключевое слово, необходимое для реализации интерфейса (interface)?'),
       (130, 'extends','implements','import','"@Override"', 'Ключевое слово, предназначенное для расширения реализации какого-то существующего класса?'),
       (131, 'функциональный интерфейс','финализированный интерфейс','единичный интерфейс','таких не бывает', 'Интерфейс, который содержит только 1 абстрактный метод?'),
       (132, 'через лямбда-выражения','через создание анонимных классов','сокращение невозможно','использование оператора super', 'Как на практике сокращается написание функциональных интерфейсов?'),
       (133, '->','<-','->>','-<', 'Какой символ используется в лямбда-выражениях?'),
--        (134, '1.1','1.8','1.5','1.2', 'В какой версии JAVA додавлена возможность использовать внутренние (вложенные классы)?'),
--        (135, 'внутренний (вложенный класс)','абстрактный класс','enum','класс по умолчанию', 'Класс, полностью объявленный в теле другого класса или интерфейса?'),
--        (136, '1.1','1.8','1.5','1.2', 'В какой версии JAVA додавлен JavaBeans?'),
--        (137, 'JavaBeans','интерфейс','абстрактный класс','POJO', 'Классы, которые инкапсулируют множество объектов в один объект, они сериализуемы, имеют конструктор без аргументов и разрешают доступ к свойствам с помощью методов получения и установки?'),
--        (138, '1.1','1.8','1.5','1.2', 'В какой версии JAVA додавлена возможность подключения к базе данных Java ( JDBC )?'),
--        (139, '1.1','1.8','1.5','1.2', 'В какой версии JAVA додавлена возможность использования интернационализации?'),
--        (140, 'интернационализация','локализация','глобализация','приватизация', 'Процесс разработки программного приложения, позволяющего адаптировать его к различным языкам и регионам без технических изменений:'),
--        (141, '1.2','1.8','1.5','1.3', 'В какой версии JAVA додавлена возможность использования Swing?'),
--        (142, 'Swing','Graphics framework','Paint','AdobeIllustration', 'Набор инструментов виджетов с графическим интерфейсом для Java, обеспечивает внешний вид, который имитирует внешний вид нескольких платформ, а также поддерживает подключаемый внешний вид, который позволяет приложениям иметь внешний вид, не связанный с базовой платформой'),
--        (143, '1.2','1.8','1.5','1.3', 'В какой версии JAVA додавлена возможность использования Swing?'),
--        (144, '1.2','1.8','1.5','1.3', 'В какой версии JAVA додавлена возможность использования Java-апплет (Java applet)?'),
--        (145, 'Java-апплет (Java applet)','Frame','JavaScriptApp','Run-code', ' Небольшие приложения, написанные на языке программирования Java (или другом языке), который компилируется в байт-код Java и доставляется пользователям в виде байт-кода Java?'),
--        (146, '1.2','1.7','1.5','1.3', 'В какой версии JAVA додавлена возможность использования Java collections framework (Фреймворк коллекций Java)?'),
--        (147, '1.3','1.7','1.9','1.4', 'В какой версии JAVA додавлена возможность использования JVM HotSpot?'),
--        (148, '1.3','1.7','1.9','1.4', 'В какой версии JAVA Интерфейс именования и каталогов Java или JNDI (Java Naming and Directory Interface) включен в основные библиотеки?'),
--        (149, '1.3','1.7','1.9','1.4', 'В какой версии JAVA добавдена возможность проигрывания звука (JavaSound)?'),
--        (150, '1.4','1.8','1.9','1.2', 'В какой версии JAVA добавдено ключевое слово "assert"?'),
--        (151, '1.4','1.8','1.9','1.2', 'В какой версии JAVA добавдены Регулярные выражения (Regular expression)?'),
--        (152, '1.4','1.8','1.9','1.2', 'В какой версии JAVA добавдена поддержка Цепочки исключений (Exception chaining)?'),
--        (153, 'Цепочка исключений (Exception chaining)','try catch...','Копирование исключений','Поиск случайных исключений', 'Метод объектно-ориентированного программирования для обработки исключений путем повторного генерирования перехваченного исключения после его помещения в новое исключение?'),
--        (154, '1.4','1.8','1.7','1.2', 'В какой версии JAVA добавдена поддержка  интернет-протокола версии 6 ( IPv6 )?'),
--        (155, '1.4','1.8','1.7','1.2', 'В какой версии JAVA добавдена возможность чтения и записи изображений в таких форматах, как JPEG и PNG?'),
--        (156, '1.4','1.5','1.7','1.2', 'В какой версии JAVA добавден встроенный синтаксический анализатор XML (Extensible Markup Language) и процессор XSLT (Extensible Stylesheet Language Transformations)?'),
--        (157, '1.4','1.5','1.7','1.2', 'В какой версии JAVA добавдены встроенные расширения безопасности и криптографии JCE (Java Cryptography Extension) , JSSE (Java Secure Socket Extension) и JAAS (Java Authentication and Authorization Service)?'),
--        (158, '1.4','1.5','1.7','1.2', 'В какую версии JAVA включена Java Web Start?'),
--        (159, 'Java Web Start','Java-апплет (Java applet)','Frame','Application', 'Приложение, которое позволяет пользователям запускать прикладные программы для платформы Java непосредственно из Интернета с помощью веб - браузера?'),
--        (160, '1.5','1.11','1.8','1.2', 'В какую версии JAVA добавлены дженерики (Generics)?'),
--        (161, '1.5','1.11','1.8','1.2', 'В какую версии JAVA добавлены Метаданные, также называемые аннотациями?'),
--        (162, '1.5','1.11','1.8','1.2', 'В какую версии JAVA добавлена возможность использования Autoboxing (классы-обертки)?'),
--        (163, '1.5','1.11','1.8','1.2', 'В какую версии JAVA добавлена возможность использования enum?'),
--        (164, '1.5','1.11','1.8','1.2', 'В какую версии JAVA добавлена возможность использования Varargs?'),
--        (165, '1.5','1.11','1.8','1.2', 'В какую версии JAVA добавлен расширенный цикл for each?'),
--        (166, '1.5','1.11','1.8','1.2', 'В какую версии JAVA добавлена возможность Статического импорта?'),
--        (167, 'статический импорт','динамический импорт','нестатический импорт','локальный импорт', 'Функция, которая позволяет использовать элементы (поля и методы) в рамках их контейнерного класса как public static в Java-коде без указания класса, в котором было определено поле?'),
--        (168, '1.8','1.11','1.6','1.2', 'В какую версии JAVA добавлен Project Nashorn (среда выполнения JavaScript, которая позволяет разработчикам встраивать код JavaScript в приложения)?'),
--        (169, '1.8','1.11','1.6','1.2', 'В какую версии JAVA добавлен запуск приложений JavaFX (прямой запуск JAR-файлов приложений JavaFX)?'),
       (170, 'filter()','map()','distinct()','sorted()', 'Конвейерный метод класса Stream, который  отфильтровывает и возвращает записи, соответствующие условию?'),
       (171, 'skip()','map()','distinct()','sorted()', 'Конвейерный метод класса Stream, который позволяет пропустить N первых элементов?'),
       (172, 'distinct()','skip()','map()','sorted()', 'Конвейерный метод класса Stream, который возвращает стрим без дубликатов?'),
       (173, 'map()','distinct()','skip()','sorted()', 'Конвейерный метод класса Stream, который преобразует каждый элемент стрима?'),
       (174, 'peek()','map()','distinct()','sorted()', 'Конвейерный метод класса Stream, который возвращает тот же стрим, но применяет функцию к каждому элементу стрима?'),
       (175, 'limit()','map()','distinct()','sorted()', 'Конвейерный метод класса Stream, который позволяет ограничить выборку определенным количеством первых элементов?'),
       (176, 'sorted()','limit()','map()','distinct()','Конвейерный метод класса Stream, который позволяет сортировать значения либо в натуральном порядке, либо задавая Comparator?'),
       (177, 'findFirst()','findAny()','collect()','count()','Терминальный метод класса Stream, который возвращает первый элемент из стрима (возвращает Optional)?'),
       (178, 'collect()','findAny()','findFirst()','count()','Терминальный метод класса Stream, который представляет результат в виде коллекций и других структур данных?'),
       (179, 'anyMatch()','noneMatch()','allMatch()','findAny()','Терминальный метод класса Stream, который возвращает true, если условие выполняется хотя бы для одного элемента?'),
       (180, 'noneMatch()','anyMatch()','allMatch()','findAny()','Терминальный метод класса Stream, который возвращает true, если условие не выполняется ни для одного элемента?'),
       (181, 'allMatch()','noneMatch()','anyMatch()','findAny()','Терминальный метод класса Stream, который возвращает true, если условие выполняется для всех элементов?'),
       (182, 'min()','max()','forEach()','forEachOrdered()','Терминальный метод класса Stream, который возвращает минимальный элемент, в качестве условия использует компаратор?'),
       (183, 'max()','min()','forEach()','forEachOrdered()','Терминальный метод класса Stream, который возвращает максимальный элемент, в качестве условия использует компаратор?'),
       (184, 'forEach()','max()','min()','forEachOrdered()','Терминальный метод класса Stream, который применяет функцию к каждому объекту стрима, не гарантируя сохранение порядка элементов при параллельном выполнении?'),
       (185, 'forEachOrdered()','forEach()','max()','min()','Терминальный метод класса Stream, который применяет функцию к каждому объекту стрима, гарантируя сохранение порядка элементов?'),
       (186, 'toArray()','forEach()','anyMatch()','map()','Терминальный метод класса Stream, который возвращает массив значений стрима?'),
       (187, 'reduce()','toArray()','forEach()','anyMatch()','Терминальный метод класса Stream, который позволяет выполнять агрегатные функции на всей коллекцией и возвращать один результат?'),
       (188, 'sum()','reduce()','toArray()','forEach()','Метод класса Stream, который возвращает сумму всех чисел?'),
       (189, 'average()','sum()','reduce()','toArray()','Метод класса Stream, который возвращает среднее арифметическое всех чисел?'),
       (190, 'mapToObj()','average()','reduce()','toArray()','Метод класса Stream, который преобразует числовой стрим обратно в объектный?'),
       (191, 'isParallel()','parallel()','reduce()','sequential()','Метод класса Stream, который позволяет узнать является ли стрим параллельным?'),
       (192, 'parallel()','isParallel()','reduce()','sequential()','Метод класса Stream, который позволяет вернуть параллельный стрим и, если стрим уже параллельный, то возвращает самого себя'),
       (193, 'sequential()','parallel()','isParallel()','reduce()','Метод класса Stream, который позволяет вернуть последовательный стрим и, если стрим уже последовательный, то возвращает самого себя'),
       (194, 'String pool','String stack','String rull','String heap','Набор строк, который хранится в памяти Java heap'),
       (195, 'одну ссылку','три ссылки','не являются объектами','не имеют ссылок (примитивы)','Переменные: String name1 = "ok"; String name2 = "ok"; String name3 = "ok";   - имеют :'),
       (196, 'экономить память путем присваивания ссылок на одинаковые строки вместо создания объектов','создавать новые объекты и структурировать их в памяти','удалять пустые объекты типа String','объединять строки в одку','Основное предназначение Sting poll (пула строк)'),
       (197, 'конкатенация','инкапсуляция','дуоризация','сложение','Термин, обозначающий соединение (слияние) строк?'),
       (198, 'создается новый объект в памяти','переменная обновляется','создается два связных объекта','объект преобразуется в новый класс StringBuilder','При добавлении строки к уже имеющейся переменной типа String ...'),
       (199, 'переменная обновляется','создается новый объект в памяти','создается два связных объекта','объект преобразуется в новый класс String','При добавлении строки к уже имеющейся переменной типа StringBuilder ...'),
       (200, 'переменная обновляется','создается новый объект в памяти','создается два связных объекта','объект преобразуется в новый класс String','При добавлении строки к уже имеющейся переменной типа StringBuffer ...'),
       (201, 'да, null добавиться к строчке в виде продолжения строки ("... null")','нет, будет исключение NullPointerException','нет, будет исключение RuntimeException','нет, программа аварийно завершит работу','Можно ли через бинарный арифметический оператор "+" добавить к строке null'),
       (202, 'нет, будет исключение NullPointerException','да, null добавиться к строчке в виде продолжения строки ("... null")','нет, будет исключение RuntimeException','нет,программа аварийно завершит работу','Можно ли через метод concat() добавить к строке null'),
       (203, 'length()','join()','count()','replace()','Метод класса String, который возвращает число символов в строке (длину строки)?'),
       (204, 'toCharArray()','join()','substring()','replace()','Метод класса String, который возвращает строку в виде массива символов char[]?'),
       (205, 'isEmpty()','join()','substring()','replace()','Метод класса String, который определяет является ли строка пустой?'),
       (206, 'concat()','+','substring()','replace()','Метод класса String, который объединяет строки?'),
       (207, 'valueOf()','join()','substring()','indexOf()','Метод класса String, который преобразует объект в строковый вид?'),
       (208, 'compare()','join()','substring()','indexOf()','Метод класса String, который сравнивает две строки?'),
       (209, 'charAt()','join()','substring()','indexOf()','Метод класса String, который возвращает символ строки по индексу?'),
       (210, 'getChars()','charAt()','substring()','indexOf()','Метод класса String, который возвращает группу символов?'),
       (211, 'equals()','equalsIgnoreCase()','substring()','replace()','Метод класса String, который сравнивает строки с учетом регистра?'),
       (212, 'equalsIgnoreCase()','equals()','substring()','replace()','Метод класса String, который сравнивает строки без учета регистра?'),
       (213, 'indexOf()','valueOf()','join()','substring()','Метод класса String, который возвращает индекс по первому искомому значению?'),
       (214, 'lastIndexOf()','indexOf()','valueOf()','substring()','Метод класса String, который возвращает индекс последнего искомого значения?'),
       (215, 'startsWith()','lastIndexOf()','valueOf()','endsWith()','Метод класса String, который определяет, начинается ли строка с указанного значения?'),
       (216, 'endsWith()','startsWith()','lastIndexOf()','valueOf()','Метод класса String, который определяет, заканчивается ли строка указанным значением?'),
       (217, 'trim()','substring()','lastIndexOf()','valueOf()','Метод класса String, который удаляет начальные и конечные пробелы?'),
       (218, 'substring()','trim()','lastIndexOf()','valueOf()','Метод класса String, который возвращает строку, начиная с определенного индекса до конца или до определенного индекса?'),
       (219, 'toLowerCase()','toUpperCase()','lastIndexOf()','equalsIgnoreCase()','Метод класса String, который переводит все символы строки в нижний регистр?'),
       (220, 'toUpperCase()','toLowerCase()','lastIndexOf()','equalsIgnoreCase()','Метод класса String, который переводит все символы строки в верхний регистр?'),
       (221, 'enum','constants','String','args','Набор именованных констант, который помогает в определении своих собственных типов данных?'),
       (222, 'enum Class{}','static enum Class{}','private enum Class{}','final enum Class{}','В каком примере правильно обозначен enum класс?'),
       (223, 'да, все перечисленное','только переменные (константы)','только конструктор и константы','только методы и константы','Может ли класс enum иметь конструкторы, методы и переменные?'),
       (224, 'ссылочного','примитивного','приватного','публичного','Какого типа является Enum в java?'),
       (225, 'статичными и финализированными','статичными','приватными','финализированными','Константы Enum в java неявно (по-умолчанию) являются...'),
       (226, 'EnumMap и EnumSet','EnumArray и EnumList','EnumList и EnumSet','EnumMap и EnumArray','Типы коллекций для работы с enum?'),
       (227, 'да','нет, enum является интерфейсом','нет, enum является абстрактным классом','нет (не требуется), константы в enum по умолчанию статичны','Можно ли создать экземпляр Enum с помощью оператора "new"?'),
       (228, 'EnumMap и EnumSet','EnumArray и EnumList','EnumList и EnumSet','EnumMap и EnumArray','Типы коллекций для работы с enum?'),
       (229, 'может реализовывать только интерфейс (интерфейсы)','может реализовывать интерфейс и унаследовать свойства других классов','может только унаследовать свойства других классов','не может','Может ли класс enum реализовывать интерфейсы и унаследовать свойства других классов??'),
       (230, 'name()','toString()','ordinal()','compareTo()','Метод Enum, который возвращает задекларированное имя константы?'),
       (231, 'toString()','name()','ordinal()','compareTo()','Метод Enum, который по умолчанию возвращает задекларированное имя константы, может быть переопределен?'),
       (232, 'ordinal()','toString()','name()','compareTo()','Метод Enum, который возвращает порядковый номер в котором экземпляр перечисления обозначен внутри enum?'),
       (233, '0', '5', '50', '5.0', 'Каким будет ответ выражения двух чисел типа "int": (10 % 2)?'),
       (234, '5', '0', '2', '5.0', 'Каким будет ответ выражения двух чисел типа "int": (10 / 2)?'),
       (235, '5.0', '0.0', '5', '50.0', 'Каким будет ответ выражения двух чисел типа "double": (10.0 / 2.0)?'),
       (236, '1.0', '3.0', '1', '3', 'Каким будет ответ выражения двух чисел типа "double": (10.0 % 3.0)?'),
       (237, '1.0', '3.0', '1', '3',  'Каким будет ответ выражения двух чисел типа "double": (5.0 % 2.0)?')




