INSERT INTO public.java_quiz (id, answer_correct, option2, option3, option1, question)
VALUES
       (1, 'long', 'int', 'byte', 'short', 'Какая переменная примитивного типа может содержать наибольшее число?'),
       (2, 'int', 'Integer', 'long', 'double', 'Какая переменная примитивного типа используется по умолчанию в качестве принимаемого целочисленного числа?'),
       (3, 'ООП', 'SOLID', 'Журнаирование', 'Тестирование', 'Определение какого понятия понимается как "Методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования"?'),
       (4, 'Инкапсуляция', 'Абстракция', 'Полиморфизм', 'Наследование', 'Один из принципов ООП, обозначающий "Сокрытие информации"?'),
       (5, 'Наследование', 'Инкапсуляция', 'Полиморфизм', 'Абстракция', 'Один из принципов ООП, обозначающий "Создание новой сущности (объекта) на базе уже существующей"?'),
       (6, 'Полиморфизм', 'Наследование', 'Абстракция', 'Инкапсуляция', 'Один из принципов ООП, обозначающий "Возможность иметь разные формы для одной и той же сущности (объекта)"?'),
       (7, 'Посылка сообщений', 'Переиспользование', 'Инкапсуляция', 'Полиморфизм', 'Один из принципов ООП, обозначающий "Форма связи, взаимодействия между сущностями (объектами)"?'),
       (8, 'Абстракция', 'Наследование', 'Инкапсуляция', 'Полиморфизм', 'Один из принципов ООП,под которым понимается "Набор общих характеристик объекта, исключая из рассмотрения частные и незначимые"?'),
       (9, 'JDK', 'JRE', 'SDK', 'JVM','Комплект разработчика приложений на языке Java, включающий в себя компилятор Java (javac), стандартные библиотеки классов Java, примеры, документацию, различные утилиты и исполнительную систему Java (JRE)'),
       (10, 'JRE', 'SDK', 'JVM','JDK', 'Минимальная реализация виртуальной машины, необходимая для исполнения Java-приложений, без компилятора и других средств разработки'),
       (11, 'JVM','JDK','JRE', 'SDK', 'Основная часть исполняющей системы Java, так называемой Java Runtime Environment (JRE), исполняет байт-код Java, предварительно созданный из исходного текста Java-программы компилятором Java (javac).'),
       (12, 'SDK', 'JVM','JDK', 'JRE','Набор средств разработки, позволяющий специалистам по программному обеспечению создавать приложения для определённого пакета программ, программного обеспечения базовых средств разработки, аппаратной платформы, компьютерной системы, игровых консолей, операционных систем и прочих платформ.'),
       (13, 'private', 'default', 'protected', 'public', 'Модификатор доступа, при котором члены класса доступны только внутри класса'),
       (14, 'default', 'private', 'protected', 'public', 'Модификатор доступа, при котором видимость класса/членов класса только внутри пакета, является модификатором доступа по умолчанию'),
       (15, 'protected', 'default', 'private', 'public', 'Модификатор доступа, при котором члены класса доступны внутри пакета и в наследниках'),
       (16, 'public', 'protected', 'default', 'private', 'Модификатор доступа, при котором класс/члены класса доступны всем'),
       (17, 'final', 'protected', 'default', 'private', 'Модификатор доступа, при котором класс не может иметь наследников'),
       (18, 'final', 'protected', 'default', 'private', 'Модификатор доступа, при котором метод не может быть переопределен в классах наследниках'),
       (19, 'final', 'protected', 'default', 'private', 'Модификатор доступа, при котором поле не может изменить свое значение после инициализации'),
       (20, 'final', 'protected', 'default', 'private', 'Модификатор доступа, при котором параметры методов не могут изменять своё значение внутри метода'),
       (21, 'final', 'protected', 'default', 'private', 'Модификатор доступа, при котором локальные переменные не могут быть изменены после присвоения им значения'),
       (22, 'main()', 'String[] args', 'create()', 'open()', 'Метод, являющийся точкой входа в программу'),
       (23, '&', '|', '^', '|=', 'Логический оператор, обозначающий логическое AND (И)'),
       (24, '&&', '|', '^', '|=', 'Логический оператор, обозначающий сокращернное AND (И)'),
       (25, '|', '==', '^', '|=', 'Логический оператор, обозначающий логическое OR (ИЛИ)'),
       (26, '||', '==', '^', '|=', 'Логический оператор, обозначающий сокращернное OR (ИЛИ)'),
       (27, '^', '==', '&', '|=', 'Логический оператор, обозначающий логическое XOR (исключающее OR (ИЛИ))'),
       (28, '!', '==', '&', '|=', 'Логический оператор, обозначающий логическое унарное NOT (НЕ)'),
       (29, '&=', '||', '&', '|=', 'Логический оператор, обозначающий AND с присваиванием'),
       (30, '|=','&=', '||', '?:', 'Логический оператор, обозначающий OR с присваиванием'),
       (31, '^=','&=', '||', '?:', 'Логический оператор, обозначающий XOR с присваиванием'),
       (32, '==','&=', '|=', '?:', 'Логический оператор, обозначающий "равно"'),
       (33, '?:','&=', '|=', '^', 'Тернарный (троичный) условный оператор'),
       (34, '?:','&=', '|=', '^', 'Оператор, которым можно заменить некоторые конструкции операторов if-then-else'),
       (35, 'нет','если есть модификатор "abstract"', 'да', 'если есть модификатор "protected"', 'Могут ли абстрактные классы унаследовать некоторые свойства других классов?'),
       (36, 'нет','если есть модификатор "private"', 'да', 'если есть модификатор "public"', 'Можно ли создавать экземпляры абстрактных класссов?'),
       (37, 'обязателен к реализации у классах наследниках','не обязателен к реализации у классах наследниках', 'необходимо реализовать в абстрактном классе', 'является ошибкой', 'Если у абстрактного класса имеется метод с модификатором abstract, то он...'),
       (38, 'сколько необходимо','только одного', 'только двух', 'ниодного', 'Сколько интерфейсов можно реализовать в одном классе?'),
       (39, 'только одного','сколько необходимо', 'только двух', 'ниодного', 'От скольких "родительских" классов можно унаследовать свойства?'),
       (40, 'Интерфейс','абстрактный класс', 'класс с мдификатором "final"', 'класс с мдификатором "static"', 'Полностью абстрактный класс, основное предназначение которого определять каким образом можем использовать класс, который его реализует.'),
       (41, 'маркерные интерфейсы','пустые интерфейсы', 'абстрактные классы', 'так недопустимо делать', 'Интерфейсы, в которых не определены методы - это...'),
       (42, 'интерфейс','класс', 'абстрактный класс', 'метод', 'Что имеет более высокий уровень абстракции?'),
       (43, 'является классом-наследником','он находится внури класса', 'является вложенным классом', 'используя Сеттеры и Геттеры', 'В каком случае объект НЕ может получить доступ к члену класса, объявленному как private?'),
       (44, 'статический блок инициализации','нестатический блок инициализации', 'статический конструктор', 'нестатический конструктор', 'Что при запуске программы вызовется в первую очередь?'),
       (45, 'классам верхнего уровня','полям', 'методам', 'вложенным классам', 'К каким конструкциям не применим модификатор static?'),
       (46, 'статический блок инициализации','нестатический блок инициализации', 'статический конструктор', 'нестатический конструктор', 'Конструкция, которая должна выполняться один раз при инициализации класса загрузчиком классов, в момент, предшествующий созданию объектов этого класса при помощи конструктора?'),
       (47, 'да','нет', 'только если методы имеют разное название', 'если имеют одинаковое количество и типы параметров', 'Может ли статический метод быть перегружен?'),
       (48, 'нет','да', 'только если методы имеют разное название', 'если имеют одинаковое количество и типы параметров', 'Может ли статический метод быть переопределён?'),
       (50, 'через ключевое слово "super"','никак', 'через ключевое слово "protected"', 'обратиться через название класса родителя', 'Как получить доступ к переопределенным методам родительского класса?'),
       (51, 'нет','да', 'если есть модификатор "final"', 'если есть модификатор "private"', 'Можно ли объявить метод абстрактным и статическим одновременно?'),
       (52, 'Private class (приватный класс)','Interfaces (интерфейс)', 'Nested class (вложенный класс)', 'Enum (Перечисление)', 'Какого типа класса не существует?'),
       (53, 'к вложенным классам','к классам верхнего уровня', 'ни к каким', 'к любым', 'К каким классам применим модификатор "static"?'),
       (54, 'напрямую','через конструктор', 'через обращение к внешнему классу', 'через Геттеры и Сеттеры', 'Каким образом из нестатического вложенного класса получить доступ к полю внешнего класса?'),
       (55, 'к статическим (с модификатором static)','никаким', 'всем', 'к приватным (с модификатором private)', 'К каким полям внешнего класса имеет прямой доступ статический вложенный класс?'),
       (56, 'boolean','String', 'Object', 'ничего не возвращает', 'Какой тип возвращаемого значения имеет оператор "assert"?'),
       (57, 'Heap','Stack', 'HDD', 'вся RAM память', 'Область памяти, который спользуется Java Runtime для выделения памяти под объекты и классы (любой объект, созданный в данном типе памяти, имеет глобальный доступ и на него могут ссылаться из любой части приложения)?'),
       (58, 'Stack','Heap','HDD','вся RAM память', 'Область хранения данных находящейя в общей оперативной памяти (RAM) (всякий раз, когда вызывается метод, в памяти стека создается новый блок, который содержит примитивы и ссылки на другие объекты в методе)?'),
       (59, 'по значению','по ссылке', 'через конструктор', 'через Геттеры и Сеттеры', 'Каким образом передаются переменные в методы?'),
       (60, 'находить неиспользуемые объекты (мусор) и совобождать память от них','находить неиспользуемые объекты (мусор) и хранить их в отдельной оюласти памяти', 'собирать информацию о неисспользуемых объектах', 'такого не существует', 'Для чего нужен сборщик мусора?'),
       (61, 'механизм сборщика мусора','компрессия', 'архивация элементов памяти', 'расширение файла подкачки', 'Процесс освобождения места в куче (Heap), для возможности добавления новых объектов?'),
       (62, 'JavaBean должен реализовывать интерфейс Serializable, или Externalizable','ни в чем', 'JavaBean является методов, а POJO - классом', 'в POJO отсутствует реализация методов equals и hashCode', 'В чем основное различие между POJO и JavaBean?'),
       (63, 'конструктор','блок инициализации', 'метод с модификатором abstract', 'main()', 'Специальный метод, у которого отсутствует возвращаемый тип и который имеет то же имя, что и класс, в котором он используется. Вызывается при создании нового объекта класса и определяет действия необходимые для его инициализации.?'),
       (64, 'по значению','по ссылке', 'через конструктор', 'через Геттеры и Сеттеры', 'Каким образом передаются переменные в методы?'),
       (65, 'byte', 'int', 'long', 'short', 'Какая переменная примитивного типа может содержать наименьшее целочисленное значение?'),
       (66, 'float', 'double', 'long', 'short', 'Какая переменная примитивного типа может содержать наименьшее число с плавающей точкой?'),
       (67, 'char', 'float', 'long', 'boolean', 'Переменная примитивного типа, содержащая только один символ?'),
       (68, 'присвоение', 'равенство', 'логическое "или', 'логическое "не равно"', 'Что обозначает знак "=" в синтаксисе java?'),
       (69, 'да', 'нет', 'можно только переменной  ссылочного типа', 'можно только переменной  примитивного типа', 'Можно ли присваивать значение переменной (инициализировать) сразу при ее объявлении?'),
       (70, 'int age = 22;', 'int age = 22', 'int age = "22";', 'Int age = 22;', 'В каком примере правильно проинициализирована переменная при ее объявлении?'),
       (71, 'CamelCase', 'LowCase', 'RabbitStyle', 'UpperCase', 'Стиль написания названий, состоящих из нескольких слов в синтаксисе java?'),
       (72, 'остаток от деления', 'вычисление процента', 'такой знак не используется', 'деление на ноль', 'Что обозначает знак "%" в синтаксисе java?'),
       (73, '1', '2', '2.5', '0.5', 'Каким будет ответ выражения двух чисел типа "int": (5 % 2)?'),
       (74, '2', '1', '2.5', '0.5', 'Каким будет ответ выражения двух чисел типа "int": (5 / 2)?'),
       (75, '2.0', '1.0', '2', '0', 'Каким будет ответ выражения двух чисел типа "double": (5.0 / 2.5)?'),
       (76, 'System.out.println("Hello World");', 'System.out.println(Hello World);', 'println("Hello World");', 'System.out.println("Hello + World")', 'Какой вариант кода выведет в консоль надпись Hello World?'),
       (77, 'void', 'boolean', 'String', 'List<>', 'Какой тип возвращаемого значения в методе ничего не возвращает?'),
       (78, 'первая заглавноя буква (Class)', 'все строчные бувы (class)', 'все заглавные буквы (CLASS)','первая строчная буква, остальные заглавные (cLASS)', 'Какого правила необходимо придерживаться в названии класса?'),
       (79, 'Class class = new Class();', 'Class class = Class();', 'Class = new Class();','Class class = new Class()', 'В каком случае правильно написание при создании нового объекта класса?'),
       (80, '==', '!=', '=!','===', 'Оператор равенства, обозначающий, что два значения равны между собой?'),
       (81, '!=','==', '=!','===', 'Оператор равенства, обозначающий, что два значения не равны между собой?'),
       (82, '<','>', '>=','<=', 'Оператор равенства, обозначающий, что первое значения меньше второго?'),
       (83, '<=','<','>', '>=', 'Оператор равенства, обозначающий, что первое значения меньше второго включительно?'),
       (84, '>=','<=','<','>',  'Оператор равенства, обозначающий, что первое значения больше второго включительно?'),
       (85, '>', '>=','<=','<', 'Оператор равенства, обозначающий, что первое значения больше второго?'),
       (86, 'возвращает значение (объект) у метода возвращаемого типа', 'возвращает значение (объект) у метода с невозвращаемым типом','ничего не возвращает','не является оператором в java', 'Что обозначает оператор "return?'),
       (87, '>', '>=','<=','<', 'Оператор равенства, обозначающий, что первое значения больше второго?'),
       (88, '++', '--','+','-', 'Унарный оператор, увеличивающий число на 1?'),
       (89, '--', '++','+','-', 'Унарный оператор, уменьшающий число на 1?'),
       (90, 'getter', 'setter','recipient','giver', 'Специальный метод, позволяющий получить данные, доступ к которым напрямую ограничен'),
       (91, 'setter','getter', 'recipient','giver', 'Специальный метод для изменения значения поля объекта, доступ к которому напрямую'),
       (92, 'можно, если они одного типа','нельзя', 'можно, если они имеют разные типы','можно, если одинаковое название переменных', 'Можно ли двум и более объектам присваивать одну и ту же ссылку на объект?'),
       (93, 'boolean condition = true;', 'Boolean condition = true;', 'boolean condition = true', 'boolean condition = "true";', 'В каком примере правильно проинициализирована переменная при ее объявлении?'),
       (94, 'float number = 2.9f;', 'float number = 2.9;', 'Float number = 2.9;', 'float number = 2.9f', 'В каком примере правильно проинициализирована переменная при ее объявлении?'),
       (95, 'String text = "Hello world!";', 'string text = "Hello world!";', 'String text = Hello world!;', 'String text = "Hello world!"', 'В каком примере правильно проинициализирована переменная при ее объявлении?'),
       (96, 'long count = 123L;', 'Long count = 123L;', 'long count = 123;', 'long count = 123', 'В каком примере правильно проинициализирована переменная при ее объявлении?'),
       (97, 'while', 'do..while', 'for', 'for each..', 'Оператор цикла с предусловием (цикл будет выполняться, пока условие будет истинно)?'),
       (98, 'do..while', 'while', 'for', 'for each..', 'Оператор цикла с постусловием (перед проверкой условия код выполниться как минимум один раз)?'),
       (99, 'for','while', 'do..while', 'for each..', 'Оператор цикла со счетчиком?'),
       (100, 'for each..','for','while', 'do..while', 'Оператор цикла для перебора коллекции?'),
       (101, '0','null','1', 'индекс совпадает со значением', 'С какого индекса начинаются элементы массива?'),
       (102, 'type[] name;','type {} name;','type[];', 'type{};', 'Как правильно объявляеться массив без создания экземпляра?'),
       (103, 'type[] name = new type[10];','type[] name = type[10];','type[] name = new type;', 'type[10] name = new type;', 'Как правильно объявляеться массив с созданием экземпляра?'),
       (104, 'неизменен','можно как расширить, так и сузить', 'можно только расширить', 'можно только сузить', 'Размер массива после его создания...'),
       (105, 'type[] name = {var1,.., varN};','type[] name = [var1,.., varN];', 'type[] = {var1,.., varN};', 'type[] name = {var1,.., varN}', 'Как правильно объявляеться массив с его инициализацией?'),
       (106, 'Hash','Set', 'Map', 'List', 'Какого типа коллекции не существует?'),
       (107, 'автоматически (при добавлении элементов создается новый массив и копируется содержимое старого)','размер коллекции неизменен', 'размер можно только уменьшить', 'вручную задав новый размер', 'Как можно расширить размер коллекции?'),
       (108, 'новыйРазмер = (старыйРазмер * 3)/2 + 1','новыйРазмер = старыйРазмер * 2', 'новыйРазмер = старыйРазмер + 10', 'новыйРазмер = (старыйРазмер * 3)/2 + 10', 'По какому принципу происходит прирост размера коллекции?'),
       (109, 'элементы хранят ссылку на следующий и предыдущий элементы','реализован в виде обычного массива', 'блоками по 5 элементов', 'элементы хранят ссылку на следующий элемент', 'Каков принцип хранения данных в LinkedList?')


