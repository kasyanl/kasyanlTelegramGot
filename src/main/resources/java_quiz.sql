INSERT INTO public.java_quiz (id, answer_correct, option2, option3, option1, question)
VALUES
       (1, 'long', 'int', 'byte', 'short', 'Какая переменная примитивного типа может содержать наибольшее число?'),
       (2, 'int', 'Integer', 'long', 'double', 'Какая переменная примитивного типа используется по умолчанию в качестве принимаемого целочисленного числа?'),
       (3, 'ООП', 'SOLID', 'Журнаирование', 'Тестирование', 'Определение какого понятия понимается как "Методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования"?'),
       (4, 'Инкапсуляция', 'Абстракция', 'Полиморфизм', 'Наследование', 'Один из принципов ООП, обозначающий "Сокрытие информации"?'),
       (5, 'Наследование', 'Инкапсуляция', 'Полиморфизм', 'Абстракция', 'Один из принципов ООП, обозначающий "Создание новой сущности (объекта) на базе уже существующей"?'),
       (6, 'Полиморфизм', 'Наследование', 'Абстракция', 'Инкапсуляция', 'Один из принципов ООП, обозначающий "Возможность иметь разные формы для одной и той же сущности (объекта)"?'),
       (7, 'Посылка сообщений', 'Переиспользование', 'Инкапсуляция', 'Полиморфизм', 'Один из принципов ООП, обозначающий "Форма связи, взаимодействия между сущностями (объектами)"?'),
       (8, 'Абстракция', 'Наследование', 'Инкапсуляция', 'Полиморфизм', 'Один из принципов ООП,под которым понимается "Набор общих характеристик объекта, исключая из рассмотрения частные и незначимые"?'),
       (9, 'JDK', 'JRE', 'SDK', 'JVM','Комплект разработчика приложений на языке Java, включающий в себя компилятор Java (javac), стандартные библиотеки классов Java, примеры, документацию, различные утилиты и исполнительную систему Java (JRE)'),
       (10, 'JRE', 'SDK', 'JVM','JDK', 'Минимальная реализация виртуальной машины, необходимая для исполнения Java-приложений, без компилятора и других средств разработки'),
       (11, 'JVM','JDK','JRE', 'SDK', 'Основная часть исполняющей системы Java, так называемой Java Runtime Environment (JRE), исполняет байт-код Java, предварительно созданный из исходного текста Java-программы компилятором Java (javac).'),
       (12, 'SDK', 'JVM','JDK', 'JRE','Набор средств разработки, позволяющий специалистам по программному обеспечению создавать приложения для определённого пакета программ, программного обеспечения базовых средств разработки, аппаратной платформы, компьютерной системы, игровых консолей, операционных систем и прочих платформ.'),
       (13, 'private', 'default', 'protected', 'public', 'Модификатор доступа, при котором члены класса доступны только внутри класса'),
       (14, 'default', 'private', 'protected', 'public', 'Модификатор доступа, при котором видимость класса/членов класса только внутри пакета, является модификатором доступа по умолчанию'),
       (15, 'protected', 'default', 'private', 'public', 'Модификатор доступа, при котором члены класса доступны внутри пакета и в наследниках'),
       (16, 'public', 'protected', 'default', 'private', 'Модификатор доступа, при котором класс/члены класса доступны всем'),
       (17, 'final', 'protected', 'default', 'private', 'Модификатор доступа, при котором класс не может иметь наследников'),
       (18, 'final', 'protected', 'default', 'private', 'Модификатор доступа, при котором метод не может быть переопределен в классах наследниках'),
       (19, 'final', 'protected', 'default', 'private', 'Модификатор доступа, при котором поле не может изменить свое значение после инициализации'),
       (20, 'final', 'protected', 'default', 'private', 'Модификатор доступа, при котором параметры методов не могут изменять своё значение внутри метода'),
       (21, 'final', 'protected', 'default', 'private', 'Модификатор доступа, при котором локальные переменные не могут быть изменены после присвоения им значения'),
       (22, 'main()', 'String[] args', 'create()', 'open()', 'Метод, являющийся точкой входа в программу'),
       (23, '&', '|', '^', '|=', 'Логический оператор, обозначающий логическое AND (И)'),
       (24, '&&', '|', '^', '|=', 'Логический оператор, обозначающий сокращернное AND (И)'),
       (25, '|', '==', '^', '|=', 'Логический оператор, обозначающий логическое OR (ИЛИ)'),
       (26, '||', '==', '^', '|=', 'Логический оператор, обозначающий сокращернное OR (ИЛИ)'),
       (27, '^', '==', '&', '|=', 'Логический оператор, обозначающий логическое XOR (исключающее OR (ИЛИ))'),
       (28, '!', '==', '&', '|=', 'Логический оператор, обозначающий логическое унарное NOT (НЕ)'),
       (29, '&=', '||', '&', '|=', 'Логический оператор, обозначающий AND с присваиванием'),
       (30, '|=','&=', '||', '?:', 'Логический оператор, обозначающий OR с присваиванием'),
       (31, '^=','&=', '||', '?:', 'Логический оператор, обозначающий XOR с присваиванием'),
       (32, '==','&=', '|=', '?:', 'Логический оператор, обозначающий "равно"'),
       (33, '?:','&=', '|=', '^', 'Тернарный (троичный) условный оператор'),
       (34, '?:','&=', '|=', '^', 'Оператор, которым можно заменить некоторые конструкции операторов if-then-else'),
       (35, 'нет','если есть модификатор "abstract"', 'да', 'если есть модификатор "protected"', 'Могут ли абстрактные классы унаследовать некоторые свойства других классов?'),
       (36, 'нет','если есть модификатор "abstract"', 'да', 'если есть модификатор "protected"', 'Могут ли абстрактные классы унаследовать некоторые свойства других классов?'),
